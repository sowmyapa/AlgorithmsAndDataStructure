create table node(id int,parentid int);

INSERT INTO `node` (`id`, `parentid`)
VALUES
    (2,1),
    (1,0),
	(3, 1),
	(4, 2),
	(5,2),
	(6,3),
	(7,3);


select case when a.id is null THEN a.parentid  when a.parentid is null then a.id end id,case when a.id is null THEN 'root'  when a.parentid is null then 'leaf' end info from
(select null as id,parentid as parentid from node where parentid not in (select n2.parentid from node n1,node n2 where n1.id=n2.parentid)
union all
select id as id,null as parentid  from node where id not in (select n1.id from node n1,node n2 where n1.id=n2.parentid))a;


------------------------------------------------------------------------------------------------------------------------------------------

Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer.

select distinct city from station where mod(id,2)=0;

--------------------------------------------------------------------------------------------------------------------------------------------

Let  be the number of CITY entries in STATION, and let  be the number of distinct CITY names in STATION; query the value of  from STATION. In other words, find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(city)-count(distinct city) from station;

-------------------------------------------------------------------------------------------------------------------------------------------------

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

Input Format

The STATION table is described as follows:

Station.jpg

where LAT_N is the northern latitude and LONG_W is the western longitude.

Sample Input

Let's say that CITY only has four entries: DEF, ABC, PQRS and WXY

Sample Output

ABC 3
PQRS 4
Explanation

When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with the respective lengths  and . The longest-named city is obviously PQRS, but there are  options for shortest-named city; we choose ABC, because it comes first alphabetically.

select min(city), len
  from (
        select city, length(city) len,
               max(length(city)) over() maxlen,
               min(length(city)) over() minlen
          from station
       )
 where len in(minlen,maxlen)
 group by len;
 
 
 --------------------------------------------------------------------------------------------------------------------------------
 
 Query the list of CITY names starting with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

Station.jpg

where LAT_N is the northern latitude and LONG_W is the western longitude.

select distinct city from station where substr(city,1,1) in ('a','e','i','o','u');

---------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select distinct city from station where substring(city,length(city),1) IN ('a','e','i','o','u');


------------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct city from station where substr(city,1,1) in ('a','e','i','o','u') and substr(city,length(city),1) in ('a','e','i','o','u');

--------------------------------------------------------------------------------------------------------------------------------------------

